<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{0dfc367f-985a-43ca-bdf9-ae8f21c3a4dc}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
    client              : FB_IotHttpClient := (sHostName := 'efb2c5ee-ec8a-44f5-aec8-410765a25d53.mock.pstmn.io', bKeepAlive := TRUE, tConnectionTimeout := T#10S);
    request             : FB_IotHttpRequest;
    trigger             : BOOL;  // True to enable request
    state               : (IDLE, MAKE_HEADER, MAKE_JSON, SEND_REQUEST, WAIT_FOR_RESPONSE, READ_RESPONSE, ERROR);
    samplestring        : STRING(511);
    jsonDocumentParser  : FB_JsonDomParser;
    jsonDocumentPointer : SJsonValue;
 (* jsonMachine         : SJsonValue; // Part of JSON parser for HTTP_GET
    jsonName            : SJsonValue; *)
    results             : STRING;
	myOutputString      : STRING(300) := 'Data to send to post';
	header				: FB_IotHttpHeaderFieldMap;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF NOT client.bConfigured THEN
    client.nHostPort := 443;
	client.stTLS.bNoServerCertCheck := TRUE;
END_IF

IF client.bConfigured THEN
    CASE State OF
        IDLE:
            IF trigger THEN
                state := MAKE_HEADER;
                trigger := FALSE;
            END_IF
		
		MAKE_HEADER:
			header.AddField('askingfordataheader1', '123', TRUE);
			header.AddField('askingfordataheader2', '456', TRUE);		
			state := MAKE_JSON;
			
		MAKE_JSON:
			jsonDocumentPointer := jsonDocumentParser.NewDocument();
			jsonDocumentParser.AddIntMember(jsonDocumentPointer, 'myInt', 123);
			state := SEND_REQUEST;
			
        SEND_REQUEST:
            IF request.SendJsonDomRequest(sUri := '/askingfordata', fbClient := client, eRequestType := ETcIotHttpRequestType.HTTP_PUT, jsonDocumentParser, header) THEN
                state := WAIT_FOR_RESPONSE;
            END_IF

        WAIT_FOR_RESPONSE:
            IF NOT request.bBusy THEN
                state := READ_RESPONSE;
            END_IF

            IF request.bError THEN
                state := ERROR;
            END_IF

        READ_RESPONSE:
            request.GetContent(pContent := ADR(samplestring), nContentSize := SIZEOF(samplestring), bSetNullTermination := TRUE);
			
			// JSON parser for HTTP_GET
           (* IF request.nStatusCode >= 200 AND request.nStatusCode < 300 THEN
                jsonDocumentPointer := request.GetJsonDomContent(jsonDocumentParser);
                IF jsonDocumentPointer <> 0 THEN
                    IF jsonDocumentParser.HasMember(jsonDocumentPointer, 'machine') THEN
                        jsonMachine := jsonDocumentParser.FindMember(jsonDocumentPointer, 'machine');
                        IF jsonDocumentParser.HasMember(jsonMachine, 'name') THEN
                            jsonName := jsonDocumentParser.FindMember(jsonMachine, 'name');
                            IF jsonDocumentParser.IsString(jsonName) THEN
                                results := jsonDocumentParser.GetString(jsonName);
                            END_IF
                        END_IF
                    END_IF
                END_IF
            END_IF *)
            state := IDLE;

        ERROR:
            //
    END_CASE
END_IF

client.Execute();]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>